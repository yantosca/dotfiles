;;; emacs-config.org: Main file for Emacs customizations
;;
;; 24 Dec 2021 -- Bob Yantosca -- yantosca@seas.harvard.edu
;;
;; This file is loaded by init.el, which issues a call to
;;(org-babel-load-file ~./emacs.d/emacs-config.org)
;;
;; You may edit this file as you wish.  Emacs-lisp code needs to go in
;; the designated blocks.  These commands will be executed upon
;; loading and then will be saved to an emacs-config.el file.
;;

#+TITLE: Bob Yantosca's Emacs Configuration

* Global toggles

This section defines global variables that are used to toggle other
settings further down in this initialization file.

** Graphical backend library

Select athena/X11 (t) or GTK (nil) as the graphical display package.

#+BEGIN_SRC emacs-lisp
  (setq enable-athena-backend nil)
#+END_SRC

** Number of frames

Decide whether to use 1 or 2 vertical frames at startup.

#+BEGIN_SRC emacs-lisp
  (setq enable-two-vertical-frames nil)
#+END_SRC

** Vterm

Enable vterm terminal emulation.

#+BEGIN_SRC emacs-lisp
  {%@@ if profile == "bender" @@%}
  (setq enable-vterm nil)
  {%@@ else @@%}
  (setq enable-vterm t)
  {%@@ endif @@%}
#+END_SRC


* Externals

This section loads external packages or configuration files that are
contained as part of this emacs-config distribution.  These are stored
in the elpa/ and elisp/ subfolders.

** External configurations

The "elisp" folder contains Emacs-lisp files from
other packages obtained via the internet.

#+BEGIN_SRC emacs-lisp
  (org-babel-load-file "~/.emacs.d/emacs-config/elisp/elisp.org")
#+END_SRC

** External packages

Load the initialization file in the elpa subdirectory, which will
load external packages such as color-theme and yasnippet.

#+BEGIN_SRC emacs-lisp
  (org-babel-load-file "~/.emacs.d/emacs-config/elpa/elpa.org")
#+END_SRC


* Display

This section contains settings for display options.

** Date and time

Display date and time in the info bar ("mode line")


#+BEGIN_SRC emacs-lisp
  (setq display-time-day-and-date t)
  (setq display-time-string-forms
        (quote
         ((if (and (not display-time-format)
                   display-time-day-and-date)
              (format-time-string "%a %b %e   " now) "  ")
          (format-time-string
           (or display-time-format
               (if display-time-24hr-format "%H:%M" "%-I:%M%p")) now)
          ))
        )
  (display-time)
#+END_SRC

Display a timestamp in a buffer


#+BEGIN_SRC emacs-lisp
(defun insert-timestamp ()
  "Insert a nicely formatted date string."
  (interactive)
  (insert (format-time-string "!  %e %b %Y - R. Yantosca - ")))
#+END_SRC

Customized insertion of timestamp (function is defined below in miscella.)

#+BEGIN_SRC emacs-lisp
(fset 'macrotimestamp
      [?\M-x ?i ?n ?s ?e ?r ?t ?- ?t ?i ?m ?e ?s ?t tab return return left ? ])

#+END_SRC

** Font

Select a default font (Emacs with GTK backend only)

NOTE: If using athena/X11 as the backend, then the default font can be
set with the emacs.Font specification in your ~/.Xresources file.

#+BEGIN_SRC emacs-lisp
  (unless enable-athena-backend
    (when (display-graphic-p)
      (set-face-font
       'default
       {%@@ if profile == "bender" @@%}
       "-*-DejaVuSansMono-Bold-R-*-*-*-100-*-*-*-*-iso8859-1")))
       {%@@ elif profile == "calculon" @@%}
       "-*-source code pro-Bold-R-*-*-*-160-*-*-*-*-iso8859-1")))
       {%@@ elif profile == "cygwin" @@%}
       "-*-DejaVuSansMono-Bold-R-*-*-*-120-*-*-*-*-iso8859-1")))
       {%@@ elif profile == "hypnotoad" @@%}
       "-*-DejaVuSansMono-Bold-R-*-*-*-100-*-*-*-*-iso8859-1")))
       {%@@ elif profile == "zoidberg" @@%}
       "-*-DejaVuSansMono-Bold-R-*-*-*-120-*-*-*-*-iso8859-1")))
       {%@@ endif @@%}
#+END_SRC

** Frames

Use a single frame at startup).

#+BEGIN_SRC emacs-lisp
  (unless enable-two-vertical-frames
    (set-frame-height (selected-frame) 41) ;; 40 lines
    (set-frame-width  (selected-frame) 81) ;; 80 cols
  )
#+END_SRC

Use two vertical frames at startup.

#+BEGIN_SRC emacs-lisp
  (when enable-two-vertical-frames
   (set-frame-height (selected-frame) 41)  ;; 40 lines
   (set-frame-width  (selected-frame) 164) ;; 164 cols
   (split-window-horizontally)
  )
#+END_SRC

** Line and column numbers

Display line and column numbers in bottom bar

#+BEGIN_SRC emacs-lisp
  (setq-default line-number-mode   t)
  (setq-default column-number-mode t)
#+END_SRC

** Scroll bar

Set the vertical scroll bar on the left
This will not take effect if running emacs -nw.

#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  (set-scroll-bar-mode 'left))
#+END_SRC

** Splash screen

Do not show the splash screen at startup.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)   ;; not working w/ 21.4
  (setq inhibit-startup-message t) ;; working w/ 21.4
#+END_SRC

** Top title

Display path name in window title.

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format "%S: %f")
#+END_SRC

** User input

Set C-k to kill the entire line.

#+BEGIN_SRC emacs-lisp
  (setq kill-whole-line t)
#+END_SRC

Enable multiple minibuffers.  If you don't do this, then you
can't do things like search the minibuffer history with M-s.

#+BEGIN_SRC emacs-lisp
  (setq minibuffer-max-depth nil)
#+END_SRC

To answer Y/N instead of YES/NO RET when asked for confirmation
NOTE: not for newbies!

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Visual bell

Subtly flash the mode line when an exception (e.g. compiler warning)
occurs.  This is less annoying than the audible bell.

#+BEGIN_SRC emacs-lisp
  (setq visible-bell nil
        ring-bell-function 'flash-mode-line)
  (defun flash-mode-line ()
    (invert-face 'mode-line)
    (run-with-timer 0.1 nil #'invert-face 'mode-line))
#+END_SRC


* General settings

This section contains various settings.

** Custom variables

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(auto-compression-mode t nil (jka-compr))
 '(case-fold-search t)
 '(column-number-mode t)
 '(current-language-environment "ASCII")
 '(display-time-mode t)
 '(global-font-lock-mode t nil (font-lock))
 '(package-selected-packages '(better-shell magit yasnippet-classic-snippets))
 '(query-user-mail-address nil)
 '(user-mail-address "yantosca@seas.harvard.edu"))
#+END_SRC

** Backup and autosave

Various settings for backing up and autosaving.

#+BEGIN_SRC emacs-lisp
  (setq backup-by-copying t)
  (setq delete-old-versions t)
  (setq kept-new-versions 10)
  (setq kept-old-versions 2)
  (setq version-control t)
#+END_SRC

** Omit

;; This C-o business was working in Xemacs, but it is not in Emacs...:
;; to add ".mod" to the list of file type to omit when you do C-o in
;; Directory.

#+BEGIN_SRC emacs-lisp
  (defalias 'omitmod
    (read-kbd-macro "C-u %o.mod RET"))
#+END_SRC

Redefine the "omit" functions for Emacs in dired mode.

#+BEGIN_SRC emacs-lisp
  (fset 'omitdotfiles
        [?% ?m ?^ ?\\ ?. ?. ?* return ?k])
#+END_SRC

And this one will omit .o, .mod, ~, and . files from directory listing.

#+BEGIN_SRC emacs-lisp
  (fset 'omit-fortran
        [?% ?m ?^ ?\\ ?. ?\\ ?| ?\\ ?. ?o ?$ ?\\ ?| ?\\ ?. ?m ?o ?d ?$ ?\\ ?| ?~ ?$ return ?k])
#+END_SRC

** Repositories

Use MELPA-Stable repository for installing packages
This is the emacs default package location.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("melpa-stable" . "http://stable.melpa.org/packages/") t)

#+END_SRC

** Miscellaneous

Kill process (like a tail -f) and purge output. In shell mode.

#+BEGIN_SRC emacs-lisp
(defalias 'quitnclean
  (read-kbd-macro "C-c C-\\ C-c C-o"))
#+END_SRC

Quick swapping between 2 buffers.

#+BEGIN_SRC emacs-lisp
(defalias 'swapbuffer
  (read-kbd-macro "C-x b RET"))
#+END_SRC


* Key bindings

** Buffers

Keybindings for swapping or deleting buffers.

#+BEGIN_SRC emacs-lisp
  (global-set-key [f10] 'swapbuffer)
  (global-set-key [f11] 'switch-to-buffer)
  (global-set-key [f12] 'kill-this-buffer)
#+END_SRC

** Deletion

Keybindings for deleting characters and words.

#+BEGIN_SRC emacs-lisp
  (global-set-key [(delete)]            "\C-d")
  (global-set-key [(control delete)]    'kill-word)
  (global-set-key [(control backspace)] 'backward-kill-word)
  (delete-selection-mode t)
#+END_SRC

** Ediff

Keybindings for Ediff-mode.

#+BEGIN_SRC emacs-lisp
  (global-set-key [(shift f1)] 'ediff-files)
  (global-set-key [(shift f2)] 'ediff-buffers)
  (global-set-key [(shift f3)] 'fullcleanediff)
#+END_SRC

** Editing

Keybindings for common editing commands.

#+BEGIN_SRC emacs-lisp
  (global-set-key [f1]               'kill-line)
  (global-set-key [f2]               'kill-word)
  (global-set-key [f3]               'string-rectangle)
  (global-set-key [f4]               'delete-rectangle)
  (global-set-key [f5]               'delete-trailing-whitespace)
  (global-set-key (kbd "<S-pause>")  "\M-l")
  (global-set-key (kbd "<pause>")    "\M-u")
  (global-set-key (kbd "<kp-enter>") 'goto-line)
#+END_SRC

** Modes

Keybindings to toggle major modes.

#+BEGIN_SRC emacs-lisp
  (global-set-key [(control f3)]  'c++-mode)
  (global-set-key [(control f4)]  'cmake-mode)
  (global-set-key [(control f5)]  'f90-mode)
  (global-set-key [(control f6)]  'org-mode)
  (global-set-key [(control f7)]  'makefile-mode)
  (global-set-key [(control f8)]  'shell-script-mode)
  (global-set-key [(control f9)]  'cperl-mode)
  (global-set-key [(control f10)] 'font-lock-mode)
  (global-set-key [(control f11)] 'kpp-mode)
#+END_SRC

** Navigation

Keybindings for navigation commands.

#+BEGIN_SRC emacs-lisp
  (global-set-key [(meta n)]      'scroll-n-lines-ahead)
  (global-set-key [(meta p)]      'scroll-n-lines-behind)
  (global-set-key [(control tab)] 'other-window)
#+END_SRC

** Search and replace

Keybindings for search & replace commands.

#+BEGIN_SRC emacs-lisp
  (global-set-key [f6]          'find-file)
  (global-set-key [(shift f6)]  'insert-file)
  (global-set-key [f7]          'save-buffer)
  (global-set-key [f8]          'isearch-forward)
  (global-set-key [f9]          'replace-string)
  (global-set-key [(shift f9)]  'query-replace)
#+END_SRC


* Major modes

This section contains customizations for the various major modes.

NOTE: Customizations for cmake-mode and yaml-mode may be found in
elisp/elisp.org.  This is because these modes are external add-ons.

** Default mode

Use fundamental-mode as the default mode.

#+BEGIN_SRC emacs-lisp
  (setq initial-major-mode 'fundamental-mode)
#+END_SRC

** Auto-assign modes

Assign major modes to certain file extensions

#+BEGIN_SRC emacs-lisp
  (setq auto-mode-alist
        (append '(("\\.cmake"      . cmake-mode)
                  ("\\.c$"         . c-mode)
                  ("\\.C$"         . c++-mode)
                  ("\\.cpp$"       . c++-mode)
                  ("\\.h$"         . c++-mode)
                  ("\\.hh$"        . c++-mode)
                  ("\\.hM$"        . c++-mode)
                  ("\\.hpp$"       . c++-mode)
                  ("\\.F$"         . fortran-mode)
                  ("\\.F90$"       . f90-mode)
                  ("\\.eqn$"       . kpp-mode)
                  ("\\.kpp$"       . kpp-mode)
                  ("\\.spc$"       . kpp-mode)
                  ("\\.H$"         . f90-mode)
                  ("\\.tex$"       . latex-mode)
                  ("\\.m$"         . matlab-mode)
                  ("\\.md$"        . markdown-mode)
                  ("\\.org$"       . org-mode)
                  ("\\.sh$"        . shell-script-mode)
                  ("\\.env$"       . shell-script-mode)
                  ("\\.pl$"        . cperl-mode)
                  ("\\.rc$"        . conf-mode)
                  ("\\.rs$"        . rust-mode)
                  ("\\.yaml$"      . yaml-mode)
                  ("\\.yml$"       . yaml-mode)
                  )auto-mode-alist))
#+END_SRC

Manually specify major-modes for certain files.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '(".bash_profile"         . shell-script-mode))
  (add-to-list 'auto-mode-alist '(".bashrc"               . shell-script-mode))
  (add-to-list 'auto-mode-alist '(".bash_aliases"         . shell-script-mode))
  (add-to-list 'auto-mode-alist '(".my_personal_settings" . shell-script-mode))
  (add-to-list 'auto-mode-alist '(".README"               . fundamental-mode))
  (add-to-list 'auto-mode-alist '("input.geos"            . conf-mode))
#+END_SRC

** auto-image-file-mode

Display images in emacs buffer.

#+BEGIN_SRC emacs-lisp
  (auto-image-file-mode)
#+END_SRC

** cperl-mode

Set indent level to 2 spaces (also in sub-blocks).

#+BEGIN_SRC emacs-lisp
  (setq perl-indent-level 2)
  (setq perl-continued-statement-offset 2)
 #+END_SRC

Create a new comment with TAB.

#+BEGIN_SRC emacs-lisp
  (setq perl-tab-to-comment t)
#+END_SRC

Matching parentheses and auto-expansion of keywords.

#+BEGIN_SRC emacs-lisp
  (setq perl-electric-parens t)
  (setq perl-electric-keywords t)
#+END_SRC

** ediff-mode

Create two Ediff windows, stacked one atop another.

#+BEGIN_SRC emacs-lisp
  (setq ediff-split-window-function 'split-window-vertically)
#+END_SRC

Set background colors for ediff-mode.

#+BEGIN_SRC emacs-lisp
  (defun update-diff-colors ()
    "update the colors for diff faces"
    (set-face-attribute 'diff-added nil
                        :foreground "black" :background "DarkSeaGreen1")
    (set-face-attribute 'diff-removed nil
                        :foreground "black" :background "RosyBrown1")
    (set-face-attribute 'diff-changed nil
                        :foreground "black" :background "wheat1"))
  (eval-after-load "diff-mode"
    '(update-diff-colors))
#+END_SRC

To restore my 2 windows setting w/ each compared file in one window.

#+BEGIN_SRC emacs-lisp
  (defalias 'clean-after-ediff
    (read-kbd-macro "C-x 1 C-x 3 C-x b RET"))
#+END_SRC

Close the two compared windows.

#+BEGIN_SRC emacs-lisp
  (defalias 'fullcleanediff
    (read-kbd-macro "<f3> <f2> <f3>"))

#+END_SRC

** font-lock-mode

Turn on global font-lock mode (which colorizes text depending on which
mode you are in).  Useful for programming.

#+BEGIN_SRC emacs-lisp
(if (fboundp 'global-font-lock-mode)
    (global-font-lock-mode 1)          ; GNU Emacs
    (setq font-lock-auto-fontify t))   ; XEmacs
#+END_SRC

** f90-mode

Define a hook so that certain things start when F90-mode starts.
Most notably, disable the electric indent mode.

#+BEGIN_SRC emacs-lisp
  (add-hook 'f90-mode-hook
            (function
             (lambda ()

               ;; use abbreviations (e.g.: "`pr" for "print")
               (setq  abbrev-mode 1)

               ; Turn off automatic indentation for Fortran mode only
               (when (fboundp 'electric-indent-mode) (electric-indent-mode -1))

               )
             )
            )
#+END_SRC

Align comments with the code.

#+BEGIN_SRC emacs-lisp
(fset 'smart-f90-tab
   [home ?  tab end])
#+END_SRC

Load f90-mode.

#+BEGIN_SRC emacs-lisp
  (require 'f90)
#+END_SRC

** fortran-mode

Add a hook to enable certain things when Fortran mode starts.
Most notably, disable electric-indent-mode.

#+BEGIN_SRC emacs-lisp
  (add-hook 'fortran-mode-hook
            (function
             (lambda ()
               (setq
                ;; use abbreviations (e.g.: ";s" for "stop")
                abbrev-mode 1
                )

               ; Turn off automatic indentation for Fortran mode only
               (when (fboundp 'electric-indent-mode) (electric-indent-mode -1))
               )
             )
  )
#+END_SRC

Load fortran-mode.

#+BEGIN_SRC emacs-lisp
  (require 'fortran)
#+END_SRC


** markdown-mode

Load markdown-mode

#+BEGIN_SRC emacs-lisp
  (require 'markdown-mode)
#+END_SRC


** org-mode

Activate org-mode

#+BEGIN_SRC emacs-lisp
  (require 'org)
#+END_SRC

Align text with section headlines.

#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
#+END_SRC

Don't show leading stars in outline levels.

#+BEGIN_SRC emacs-lisp
  (setq org-hide-leading-stars t)
#+END_SRC

Skip even indent levels, to space sections out little more.

#+BEGIN_SRC emacs-lisp
  (setq org-odd-levels-only t)
#+END_SRC

In source code blocks, use indentation rules corresponding to the
language's major mode (i.e. use C-style indentation for C, F90
indentation for Fortran-90, etc.).

#+BEGIN_SRC emacs-lisp
  (setq org-src-tab-acts-natively t)
#+END_SRC

Hide markup elements (bold, italic) from rendering in org-mode text.

#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
#+END_SRC

Colorize TODO items that have been marked as "DONE".

#+BEGIN_SRC emacs-lisp
  (setq org-fontify-done-headline t)
#+END_SRC

Add a timestamp when each TODO item is marked as DONE.

#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC

Use LaTeX-style syntax to insert special characters.

#+BEGIN_SRC emacs-lisp
  (setq org-pretty-entities nil)
#+END_SRC

Define keys for certain commands.

#+BEGIN_SRC emacs-lisp
  (setq org-structure-template-alist
    '(("a" . "export ascii\n")
      ("c" . "center\n")
      ("C" . "comment\n")
      ("e" . "example\n")
      ("E" . "export")
      ("h" . "export html\n")
      ("l" . "export latex\n")
      ("q" . "quote\n")
      ("s" . "src")
      ("v" . "verse\n")))
#+END_SRC

Look for org-agenda files: ~/org/home.org and ~/org/work.org

#+BEGIN_SRC emacs-lisp
  (if (file-directory-p "~/org")
      (setq org-agenda-files (list "~/org/home.org"
                                   "~/org/work.org")))
#+END_SRC

Define keybindings for org-agenda features.

#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
#+END_SRC

Set default column view headings: Task Total-Time Time-Stamp

#+BEGIN_SRC emacs-lisp
  (setq org-columns-default-format "%50ITEM(Task) %10CLOCKSUM %16TIMESTAMP_IA")
#+END_SRC


** shell-script-mode

Define a hook that will start certain things when shell-script mode
starts: The home key, cycling up & down through command history.

#+BEGIN_SRC emacs-lisp
(add-hook 'shell-mode-hook
	  '(lambda ()
             (local-set-key [home] 'comint-bol)                ;; Home key

	     (local-set-key [up]                                 ;; Cycle up
                            '(lambda () (interactive)          ;; through
                               (if (comint-after-pmark-p)      ;; command
                                   (comint-previous-input 1)   ;; history
                                 (previous-line 1))))

	     (local-set-key [down]                               ;; Cycle down
                            '(lambda () (interactive)          ;; through
                               (if (comint-after-pmark-p)      ;; command
                                   (comint-next-input 1)       ;; history
                                 (forward-line 1))))
             )
)
#+END_SRC

** text-mode

Turn-on auto-formatting in text-mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'text-mode-hook 'turn-on-auto-fill)
#+END_SRC


* Motion (cursor and mouse)

** Bounce betwen parentheses

BOUNCE BETWEEN PARENTHESES
bounces from one sexp "(){}[]<>" to another (ala vi's %)
written by Joe Casadonte (joc@netaxs.com)

#+BEGIN_SRC emacs-lisp
  (defun joc-bounce-sexp ()
    "Will bounce between matching parens just like % in vi"
    (interactive)
    (let ((prev-char (char-to-string (preceding-char)))
          (next-char (char-to-string (following-char))))
          (cond ((string-match "[[{(<]" next-char) (forward-sexp 1))
                    ((string-match "[\]})>]" prev-char) (backward-sexp 1))
                    (t (error "%s" "Not on a paren, brace, or bracket")))))
  (global-set-key [(control =)] 'joc-bounce-sexp)
#+END_SRC

** Cursor scroll

Scroll up & down.

#+BEGIN_SRC emacs-lisp
  (defalias 'scroll-ahead 'scroll-up)
  (defalias 'scroll-behind 'scroll-down)
#+END_SRC

Scroll N lines up and down.

#+BEGIN_SRC emacs-lisp
  (defun scroll-n-lines-ahead (&optional n)
    "Scroll ahead N lines (1 by default)."
    (interactive "P")
    (scroll-ahead (prefix-numeric-value n)))

  (defun scroll-n-lines-behind (&optional n)
    "Scroll behind N lines (1 by default)."
    (interactive "P")
    (scroll-behind (prefix-numeric-value n)))
#+END_SRC

Scroll fast by 10 lines at a time.

#+BEGIN_SRC emacs-lisp
  (global-set-key [(control shift n)] (lambda () (interactive) (next-line 10)))
  (global-set-key [(control shift p)] (lambda () (interactive) (previous-line 10)))
#+END_SRC

Scroll only one line when cursor is at the bottom of the screen
(instead of finding the lastline suddenly in the middle).

#+BEGIN_SRC emacs-lisp
  (setq scroll-step 1)
#+END_SRC

** Mouse scroll

Scroll 3 lines at a time with the mouse wheel.

#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-scroll-amount '(3 ((shift) . 3) ((control) . nil)))
  (setq mouse-wheel-progressive-speed nil)
#+END_SRC


* Terminal emulation

This section contains options for the terminal emulation modes.

** term

Define options for the default term-mode, which is a terminal emulator
written in emacs-lisp.  This will be slower than vterm, which is a
compiled module.

Also note: if vterm is available, these options will not be applied.

See http://stackoverflow.com/questions/2886184/copy-paste-in-emacs-ansi-term-shell/2886539#2886539

#+BEGIN_SRC emacs-lisp
  (unless enable-vterm
    (defun ash-term-hooks ()
      ;; dabbrev-expand in term
      (define-key term-raw-escape-map "/"
        (lambda ()
          (interactive)
          (let ((beg (point)))
            (dabbrev-expand nil)
            (kill-region beg (point)))
          (term-send-raw-string (substring-no-properties (current-kill 0)))))
      ;; yank in term (bound to C-c C-y)
      (define-key term-raw-escape-map "\C-y"
        (lambda ()
          ((insert )nteractive)
          (term-send-raw-string (current-kill 0)))))
    (add-hook 'term-mode-hook 'ash-term-hooks)
  )
#+END_SRC

Kill the buffer when the terminal is exited.
See: http://emacs-journey.blogspot.com.au/2012/06/improving-ansi-term.html

#+BEGIN_SRC emacs-lisp
  (unless enable-vterm
    (defadvice term-sentinel (around my-advice-term-sentinel (proc msg))
      (if (memq (process-status proc) '(signal exit))
          (let ((buffer (process-buffer proc)))
            ad-do-it
            (kill-buffer buffer))
        ad-do-it))
    (ad-activate 'term-sentinel)
    )
#+END_SRC

Always enable bash (sorry zsh...)

#+BEGIN_SRC emacs-lisp
  (unless enable-vterm
    (defvar my-term-shell "/bin/bash")
    (defadvice term (before force-bash)
      (interactive
       (list my-term-shell)))
    (ad-activate 'term)
    )
#+END_SRC

Enable UTF-8 character encoding.

#+BEGIN_SRC emacs-lisp
  (unless enable-vterm
    (defun my-term-use-utf8 ()
      (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))
    (add-hook 'term-exec-hook 'my-term-use-utf8)
    )
#+END_SRC

Return most recently used term buffer.

#+BEGIN_SRC emacs-lisp
  (unless enable-vterm
    (defun last-term-buffer (l)
      "Return most recently used term buffer."
      (when l
            (if (eq 'term-mode (with-current-buffer (car l) major-mode))
                (car l) (last-term-buffer (cdr l)))))
  )
#+END_SRC


Switch to the term buffer last used, or create a new one if none
exists, or if the current buffer is already a term.

#+BEGIN_SRC emacs-lisp
  (unless enable-vterm
    (defun get-term ()
      (interactive)
      (let ((b (last-term-buffer (buffer-list))))
            (if (or (not b) (eq 'term-mode major-mode))
                (multi-term)
              (switch-to-buffer b))))
  )
#+END_SRC

Kill entire line with C-k

#+BEGIN_SRC emacs-lisp
  (unless enable-vterm
    (defun term-send-kill-whole-line ()
      (interactive)
      (term-send-raw-string "\C-a")
      (term-send-raw-string "\C-k"))
    )
#+END_SRC

Opens a uniquely-named terminal running bash.  Appends the terminal
number (with <>) to the name of the buffer.

#+BEGIN_SRC emacs-lisp
  (unless enable-vterm
    (defun unique-bash-term ()
      (interactive)
      (set-buffer (make-term "terminal" my-term-shell))
      (term-mode)
      (term-char-mode)
      (switch-to-buffer "*terminal*")
      (rename-uniquely)
      )
    )
#+END_SRC

Set some keybindings specific to term-mode

#+BEGIN_SRC emacs-lisp
  (unless enable-vterm
    (setq multi-term-program "/bin/bash")
    (setq term-unbind-key-list '("C-x" "<ESC>"))
    (setq term-bind-key-alist
          '(("C-c" . term-interrupt-subjob)
            ("C-p" . term-send-up)
            ("C-n" . term-send-down)
            ("C-s" . isearch-forward)
            ("C-r" . term-send-reverse-search-history)
            ("C-m" . term-send-raw)
            ("C-k" . term-send-kill-whole-line)
            ("C-y" . yank)
            ("C-_" . term-send-raw)
            ("M-f" . term-send-forward-word)
            ("M-b" . term-send-backward-word)
            ("M-K" . term-send-kill-line)
            ("M-p" . previous-line)
            ("M-n" . next-line)
            ("M-y" . yank-pop)
            ("M-." . term-send-raw-meta)))

    (global-set-key (kbd "C-q") 'unique-bash-term)
    (global-set-key (kbd "C-;") "\C-c \C-j") ;; Line mode
    (global-set-key (kbd "C-'") "\C-c \C-k") ;; Char mode
    (define-key global-map (kbd "C-x e") 'multi-term)
    )
#+END_SRC

** vterm

This section contains customizations for vterm terminal emulation
(will be activated if enable-vterm is set to t).

Look for init files in the emacs-libvterm submodule.

#+BEGIN_SRC emacs-lisp
  (when enable-vterm
    (add-to-list 'load-path "~/.emacs.d/emacs-config/emacs-libvterm")
    (require 'vterm)
  )
#+END_SRC


Kill the buffer when vterminal is exited.
See http://emacs-journey.blogspot.com.au/2012/06/improving-ansi-vterm.html

#+BEGIN_SRC emacs-lisp
  (when enable-vterm
    (defadvice vterm-sentinel (around my-advice-vterm-sentinel (proc msg))
      (if (memq (process-status proc) '(signal exit))
          (let ((buffer (process-buffer proc)))
            ad-do-it
            (kill-buffer buffer))
        ad-do-it))
    (ad-activate 'vterm-sentinel)
  )
#+END_SRC

Always use bash (sorry zsh...)

#+BEGIN_SRC emacs-lisp
  (when enable-vterm
    (defvar my-vterm-shell "/bin/bash")
    (defadvice vterm (before force-bash)
      (interactive
       (list my-vterm-shell)))
    (ad-activate 'vterm)
  )
#+END_SRC

Use UTF-8 character encoding.

#+BEGIN_SRC emacs-lisp
  (when enable-vterm
    (defun my-vterm-use-utf8 ()
      (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))
    (add-hook 'vterm-exec-hook 'my-vterm-use-utf8)
  )
#+END_SRC

Return the most recently used vterm buffer.

#+BEGIN_SRC emacs-lisp
  (when enable-vterm
    (defun last-vterm-buffer (l)
      (when l
            (if (eq 'vterm-mode (with-current-buffer (car l) major-mode))
                (car l) (last-vterm-buffer (cdr l)))))
  )
#+END_SRC

Switch to the vterm buffer last used, or create a new one if none
exists, or if the current buffer is already a vterm.

#+BEGIN_SRC emacs-lisp
  (when enable-vterm
    (defun get-vterm ()
      (interactive)
      (let ((b (last-vterm-buffer (buffer-list))))
            (if (or (not b) (eq 'vterm-mode major-mode))
                (multi-vterm)
              (switch-to-buffer b))))
  )
#+END_SRC

Define functions for killing an entire line.

#+BEGIN_SRC emacs-lisp
  (when enable-vterm
    (defun vterm-send-kill-whole-line ()
      (interactive)
      (vterm-send-raw-string "\C-a")
      (vterm-send-raw-string "\C-k"))
    (defun vterm-send-kill-line ()
      (interactive)
      (vterm-send-raw-string "\C-k"))
  )
#+END_SRC

Open a uniquely-named vterminal.

#+BEGIN_SRC emacs-lisp
  (when enable-vterm
    (defun unique-bash-vterm ()
      (interactive)
      (vterm)
      (vterm-send-key "<escape>")
      (rename-uniquely))
  )
#+END_SRC

Set some vterm-specific keybindings.

#+BEGIN_SRC emacs-lisp
  (when enable-vterm
    (global-set-key [(control f1)] 'unique-bash-vterm)
    (global-set-key (kbd "C-q") 'unique-bash-vterm)
    (define-key global-map (kbd "C-x e") 'multi-vterm)
  )
#+END_SRC
